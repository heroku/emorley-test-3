name: _buildpacks-release

env:
  CARGO_TERM_COLOR: always

on:
  workflow_call:
    inputs:
      app_id:
        description: Application ID of GitHub application (e.g.; the Linguist App)
        type: string
        required: true
      app_email:
        description: The email address of the GitHub application bot user (e.g.; the Linguist App)
        type: string
        required: false
        default: ${{ vars.LINGUIST_GH_APP_EMAIL }}
      app_username:
        description: The username of the GitHub application bot user (e.g.; the Linguist App)
        type: string
        required: false
        default: ${{ vars.LINGUIST_GH_APP_USERNAME }}
      dry_run:
        required: false
        type: boolean
        default: false
        description: Flag used for testing purposes to prevent actions that perform publishing operations from executing
      ip_allowlisted_runner:
        description: The GitHub Actions runner to use to run jobs that require IP allow-list privileges
        type: string
        required: false
        default: pub-hk-ubuntu-22.04-small
      languages_cli_branch:
        description: The branch to install the Languages CLI from (FOR TESTING)
        type: string
        required: false
        default: main
    secrets:
      app_private_key:
        description: Private key of GitHub application (e.g. the Linguist App)
        required: true
      cnb_registry_token:
        required: true
        description: The token of the GitHub user used to interact with the CNB registry
      docker_hub_user:
        required: true
        description: The username to login to Docker Hub with
      docker_hub_token:
        required: true
        description: The token to login to Docker Hub with

jobs:
  compile:
    name: Compile Buildpacks
    runs-on: ubuntu-latest
    outputs:
      buildpacks: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
      version: ${{ steps.generate-buildpack-matrix.outputs.version }}
      changelog: ${{ steps.generate-changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install musl-tools
        run: sudo apt-get install musl-tools --no-install-recommends

      - name: Update Rust toolchain
        run: rustup update

      - name: Install Rust linux-musl target
        run: rustup target add x86_64-unknown-linux-musl

      - name: Rust cache
        uses: Swatinem/rust-cache@v2.6.2

      # the version of `libcnb-cargo` installed here is kept in sync with the version of `libcnb-package`
      # that the release automation CLI tooling depends on
      - name: Install libcnb-cargo
        run: |
          LOCKFILE_URL="https://raw.githubusercontent.com/heroku/languages-github-actions/${{ inputs.languages_cli_branch }}/Cargo.lock"
          LIBCNB_PACKAGE_VERSION=$( \
            curl --silent --show-error --fail --retry 5 --retry-all-errors --connect-timeout 10 --max-time 60 "${LOCKFILE_URL}" \
            | yq -ptoml -oyaml '.package[] | select(.name == "libcnb-package") | .version' \
          )
          cargo install --locked "libcnb-cargo@${LIBCNB_PACKAGE_VERSION}"

      - name: Install Languages CLI
        uses: heroku/languages-github-actions/.github/actions/install-languages-cli@main
        with:
          branch: ${{ inputs.languages_cli_branch }}
          update_rust_toolchain: false

      - name: Package buildpacks
        id: libcnb-package
        run: cargo libcnb package --release

      - name: Generate buildpack matrix
        id: generate-buildpack-matrix
        run: actions generate-buildpack-matrix

      - name: Generate changelog
        id: generate-changelog
        run: actions generate-changelog --version ${{ steps.generate-buildpack-matrix.outputs.version }}

      - name: Temporary fix for bash-based buildpacks
        run: |
          buildpacks='${{ steps.generate-buildpack-matrix.outputs.buildpacks }}'

          bash_buildpack_source_dirs=()
          bash_buildpack_output_dirs=()

          # copy any bash-based buildpack to target buildpack dir because `cargo libcnb package` will ignore them
          for buildpack in $(jq -c '.[]' <<< "${buildpacks}"); do
            buildpack_dir=$(jq -r '.buildpack_dir' <<< "${buildpack}")
            output_dir=$(jq -r '.buildpack_output_dir' <<< "${buildpack}")
            if [ ! -d "${output_dir}" ]; then
              echo "bash-based buildpack detected at ${buildpack_dir}"
              cp -R "${buildpack_dir}" "${output_dir}"
              bash_buildpack_source_dirs+=("${buildpack_dir}")
              bash_buildpack_output_dirs+=("${output_dir}")
            fi
          done

          # replace dependencies that reference a bash-buildpack
          for buildpack in $(jq -c '.[]' <<< "${buildpacks}"); do
            output_dir=$(jq -r '.buildpack_output_dir' <<< "${buildpack}")
            echo "checking dependencies in ${output_dir}/package.toml"
            for dep in $(yq -oy '.dependencies[].uri' "${output_dir}/package.toml"); do
              if realpath "${dep}" &> /dev/null; then
                dep_path=$(realpath "${dep}")
                for i in "${!bash_buildpack_source_dirs[@]}"; do
                  bash_buildpack_source_dir="${bash_buildpack_source_dirs[$i]}"
                  bash_buildpack_output_dir="${bash_buildpack_output_dirs[$i]}"
                  if [ "${bash_buildpack_source_dir}" = "${dep_path}" ]; then
                    echo "replacing ${dep} with ${bash_buildpack_output_dir}"
                    sed -i 's|'"$dep"'|'"$bash_buildpack_output_dir"'|g' "${output_dir}/package.toml"
                  fi
                done
              fi
            done
          done

      - name: Cache buildpacks
        uses: actions/cache/save@v3
        with:
          key: ${{ github.run_id }}-compiled-buildpacks
          path: target/buildpack

  publish-docker:
    name: Publish → Docker - ${{ matrix.buildpack_id }}
    needs: [compile]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compile.outputs.buildpacks) }}
    steps:
      - name: Restore buildpacks
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ github.run_id }}-compiled-buildpacks
          path: target/buildpack
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.4.0

      - name: Create Docker Image
        run: pack buildpack package ${{ matrix.buildpack_id }} --config ${{ matrix.buildpack_output_dir }}/package.toml -v

      - name: Login to Docker Hub
        if: inputs.dry_run == false
        uses: docker/login-action@v2.2.0
        with:
          registry: docker.io
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_token }}

      - name: Check if version is already on Docker Hub
        id: check
        run: echo "published_to_docker=$(docker manifest inspect "${{ matrix.docker_repository }}:${{ matrix.buildpack_version }}" &> /dev/null && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Tag and publish buildpack
        if: inputs.dry_run == false && steps.check.outputs.published_to_docker == 'false'
        run: |
          docker tag ${{ matrix.buildpack_id }} ${{ matrix.docker_repository }}:${{ matrix.buildpack_version }}
          docker push ${{ matrix.docker_repository }}:${{ matrix.buildpack_version }}

  publish-github:
    name: Publish → GitHub Release
    needs: [compile]
    runs-on: ${{ inputs.ip_allowlisted_runner }}
    steps:
      - name: Restore buildpacks
        uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{ github.run_id }}-compiled-buildpacks
          path: target/buildpack
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.4.0

      - name: Generate CNB files
        run: |
          for buildpack in $(jq -c '.[]' <<< '${{ needs.compile.outputs.buildpacks }}'); do
            artifact_prefix=$(jq -r '.buildpack_artifact_prefix' <<< "${buildpack}")
            output_dir=$(jq -r '.buildpack_output_dir' <<< "${buildpack}")
            pack buildpack package "${artifact_prefix}.cnb" --config "${output_dir}/package.toml" --format file --verbose
          done

      - name: Get token for GitHub application (Linguist)
        uses: heroku/use-app-token-action@main
        id: generate-token
        with:
          app_id: ${{ inputs.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Check if release exists
        id: check
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}
        run: echo "published_to_github=$(gh release view v${{ needs.compile.outputs.version }} -R ${{ github.repository }} &> /dev/null && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: inputs.dry_run == false && steps.check.outputs.published_to_github == 'false'
        uses: softprops/action-gh-release@v0.1.15
        with:
          token: ${{ steps.generate-token.outputs.app_token }}
          tag_name: v${{ needs.compile.outputs.version }}
          body: ${{ needs.compile.outputs.changelog }}
          files: "*.cnb"
          fail_on_unmatched_files: true

  publish-cnb:
    name: Publish → CNB Registry - ${{ matrix.buildpack_id }}
    needs: [compile, publish-docker]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compile.outputs.buildpacks) }}
    steps:
      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.4.0

      - name: Check if version is already in the registry
        id: check
        run: |
          export URL="https://registry.buildpacks.io/api/v1/buildpacks/${{ matrix.buildpack_id }}/${{ matrix.buildpack_version }}"
          export EXISTS=$(if [ "$( curl -s -o /dev/null -I -w "%{http_code}" "${URL}")" = "200" ]; then echo 'true'; else echo 'false'; fi)
          echo "published_to_cnb_registry=${EXISTS}" >> $GITHUB_OUTPUT

      - name: Calculate the buildpack image digest
        id: digest
        run: echo "value=$(crane digest ${{ matrix.docker_repository }}:${{ matrix.buildpack_version }})" >> "$GITHUB_OUTPUT"

      - name: Register the new version with the CNB Buildpack Registry
        if: inputs.dry_run == false && steps.check.outputs.published_to_cnb_registry == 'false'
        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:5.4.0
        with:
          token: ${{ secrets.cnb_registry_token }}
          id: ${{ matrix.buildpack_id }}
          version: ${{ matrix.buildpack_version }}
          address: ${{ matrix.docker_repository }}@${{ steps.digest.outputs.value }}

  update-builder:
    name: Update Builder
    needs: [compile, publish-docker, publish-cnb, publish-github]
    runs-on: ${{ inputs.ip_allowlisted_runner }}
    steps:
      - name: Get token for GH application (Linguist)
        uses: heroku/use-app-token-action@main
        id: generate-token
        with:
          app_id: ${{ inputs.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ./buildpacks

      - name: Checkout builder repository
        uses: actions/checkout@v3
        with:
          repository: heroku/builder
          path: ./builder
          # Using the GH application token here will configure the local git config for this repo with credentials
          # that can be used to make signed commits that are attributed to the GH application user
          token: ${{ steps.generate-token.outputs.app_token }}

      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.4.0

      - name: Install Languages CLI
        uses: heroku/languages-github-actions/.github/actions/install-languages-cli@main
        with:
          branch: ${{ inputs.languages_cli_branch }}

      - name: Update Builder
        # The dry run check is performed here because the update process requires a published
        # image to exist in order to calculate a digest with `crane`. Adding the check here
        # means no files will be modified and so no PR will be created later.
        if: inputs.dry_run == false
        run: actions update-builder --repository-path ./buildpacks --builder-repository-path ./builder --builders builder-22,buildpacks-20

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v5.0.2
        with:
          token: ${{ steps.generate-token.outputs.app_token }}
          title: Update ${{ github.repository }} to v${{ needs.compile.outputs.version }}
          body: ${{ needs.compile.outputs.changelog }}
          commit-message: |
            Update ${{ github.repository }} to v${{ needs.compile.outputs.version }}

            ${{ needs.compile.outputs.changelog }}
          path: ./builder
          branch: update/${{ github.repository }}
          delete-branch: true
          # This will ensure commits made from this workflow are attributed to the GH application user
          committer: ${{ inputs.app_username }} <${{ inputs.app_email }}>
          author: ${{ inputs.app_username }} <${{ inputs.app_email }}>

      - name: Configure PR
        if: steps.pr.outputs.pull-request-operation == 'created'
        run: gh pr merge --auto --squash --repo heroku/builder "${{ steps.pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}
