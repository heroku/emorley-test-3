name: _buildpacks-release

on:
  workflow_call:
    inputs:
      app_id:
        description: Application ID of GitHub application (e.g.; the Linguist App)
        type: string
        required: true
      app_email:
        description: The email address of the GitHub application bot user (e.g.; the Linguist App)
        type: string
        required: false
        default: ${{ vars.LINGUIST_GH_APP_EMAIL }}
      app_username:
        description: The username of the GitHub application bot user (e.g.; the Linguist App)
        type: string
        required: false
        default: ${{ vars.LINGUIST_GH_APP_USERNAME }}
      dry_run:
        required: false
        type: boolean
        default: false
        description: Flag used for testing purposes to prevent actions that perform publishing operations from executing
      ip_allowlisted_runner:
        description: The GitHub Actions runner to use to run jobs that require IP allow-list privileges
        type: string
        required: false
        default: pub-hk-ubuntu-22.04-small
      languages_cli_branch:
        description: The branch to install the Languages CLI from (FOR TESTING)
        type: string
        required: false
        default: main
    secrets:
      app_private_key:
        description: Private key of GitHub application (e.g. the Linguist App)
        required: true
      cnb_registry_token:
        required: true
        description: The token of the GitHub user used to interact with the CNB registry
      docker_hub_user:
        required: true
        description: The username to login to Docker Hub with
      docker_hub_token:
        required: true
        description: The token to login to Docker Hub with

defaults:
  run:
    # Setting an explicit bash shell ensures GitHub Actions enables pipefail mode too,
    # ratherthan only error on exit (improving failure UX when pipes are used). See:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
    shell: bash

env:
  CARGO_TERM_COLOR: always
  PACKAGE_DIR: ./packaged

jobs:
  compile:
    name: Compile Buildpacks
    runs-on: ${{ inputs.ip_allowlisted_runner }}
    outputs:
      buildpacks: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
      version: ${{ steps.generate-buildpack-matrix.outputs.version }}
      changelog: ${{ steps.generate-changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Languages CLI
        uses: heroku/languages-github-actions/.github/actions/install-languages-cli@main
        with:
          branch: ${{ inputs.languages_cli_branch }}
          update_rust_toolchain: false

      - name: Generate buildpack matrix
        id: generate-buildpack-matrix
        run: actions generate-buildpack-matrix --package-dir ${{ env.PACKAGE_DIR }}

      - name: Update Rust toolchain
        run: rustup update

      - name: Install cross-compile tooling
        env:
          RUST_TRIPLES: ${{ steps.generate-buildpack-matrix.outputs.rust_triples }}
        run: |
          for triple in $(jq --exit-status -r '.[]' <<< "${RUST_TRIPLES}"); do
            if [[ "$triple" == "aarch64-unknown-linux-musl" ]]; then
              sudo apt-get install musl-tools gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross --no-install-recommends
            elif [[ "$triple" == "x86_64-unknown-linux-musl" ]]; then
              sudo apt-get install musl-tools --no-install-recommends
            else
              echo "WARNING: Unknown triple: $triple. Cross-compile dependencies were skipped."
            fi
            rustup target add "$triple"
          done

      - name: Rust cache
        uses: Swatinem/rust-cache@v2.7.3

      # the version of `libcnb-cargo` installed here is kept in sync with the version of `libcnb-package`
      # that the release automation CLI tooling depends on
      - name: Install libcnb-cargo
        run: |
          LOCKFILE_URL="https://raw.githubusercontent.com/heroku/languages-github-actions/${{ inputs.languages_cli_branch }}/Cargo.lock"
          LIBCNB_PACKAGE_VERSION=$( \
            curl --silent --show-error --fail --retry 5 --retry-all-errors --connect-timeout 10 --max-time 60 "${LOCKFILE_URL}" \
            | yq -ptoml -oyaml '.package[] | select(.name == "libcnb-package") | .version' \
          )
          cargo install --locked "libcnb-cargo@${LIBCNB_PACKAGE_VERSION}"

      - name: Package buildpacks
        id: libcnb-package
        env:
          BUILDPACKS: ${{ steps.generate-buildpack-matrix.outputs.buildpacks }}
        run: |
          package_dir=$(realpath "${{ env.PACKAGE_DIR }}")
          for buildpack in $(jq --exit-status -c '.[]' <<< "${BUILDPACKS}"); do
            buildpack_dir=$(jq --exit-status -r '.buildpack_dir' <<< "${buildpack}")
            if [ -f "${buildpack_dir}/bin/build" ] && [ -f "${buildpack_dir}/bin/detect" ]; then
              echo "Skipping ${buildpack_dir}"
              continue
            fi
            cd "${buildpack_dir}"
            for triple in $(jq --exit-status -r '.targets | map(.rust_triple) | .[]' <<< "${buildpack}"); do
              cargo libcnb package --release --package-dir "${package_dir}" --target "${triple}"
            done
          done

      - name: Generate changelog
        id: generate-changelog
        run: actions generate-changelog --version ${{ steps.generate-buildpack-matrix.outputs.version }}

      - name: Temporary fix for bash-based buildpacks
        run: |
          buildpacks='${{ steps.generate-buildpack-matrix.outputs.buildpacks }}'

          bash_buildpack_source_dirs=()
          bash_buildpack_output_dirs=()

          # copy any bash-based buildpack to target buildpack dir because `cargo libcnb package` will ignore them
          for buildpack in $(jq --exit-status -c '.[]' <<< "${buildpacks}"); do
            buildpack_dir=$(jq --exit-status -r '.buildpack_dir' <<< "${buildpack}")
            output_dir=$(jq --exit-status -r '.targets[0].output_dir' <<< "${buildpack}")
            if [ ! -d "${output_dir}" ]; then
              echo "bash-based buildpack detected at ${buildpack_dir}"
              cp -R "${buildpack_dir}" "${output_dir}"
              bash_buildpack_source_dirs+=("${buildpack_dir}")
              bash_buildpack_output_dirs+=("${output_dir}")
            fi
          done

          # replace dependencies that reference a bash-buildpack
          for buildpack in $(jq --exit-status -c '.[]' <<< "${buildpacks}"); do
            for output_dir in $(jq --exit-status -r '.targets | map(.output_dir) | .[]' <<< "${buildpack}"); do
              echo "checking dependencies in ${output_dir}/package.toml"
              for dep in $(yq -oy '.dependencies[].uri' "${output_dir}/package.toml"); do
                if realpath "${dep}" &> /dev/null; then
                  dep_path=$(realpath "${dep}")
                  for i in "${!bash_buildpack_source_dirs[@]}"; do
                    bash_buildpack_source_dir="${bash_buildpack_source_dirs[$i]}"
                    bash_buildpack_output_dir="${bash_buildpack_output_dirs[$i]}"
                    if [ "${bash_buildpack_source_dir}" = "${dep_path}" ]; then
                      echo "replacing ${dep} with ${bash_buildpack_output_dir}"
                      sed -i 's|'"$dep"'|'"$bash_buildpack_output_dir"'|g' "${output_dir}/package.toml"
                    fi
                  done
                fi
              done
            done
          done

      - name: Cache buildpacks
        uses: actions/cache/save@v4
        with:
          key: ${{ github.run_id }}-compiled-buildpacks
          path: ${{ env.PACKAGE_DIR }}

  publish-docker:
    name: Publish â†’ Docker - ${{ matrix.buildpack_id }}
    needs: [compile]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compile.outputs.buildpacks) }}
    steps:
      - name: Restore buildpacks
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          key: ${{ github.run_id }}-compiled-buildpacks
          path: ${{ env.PACKAGE_DIR }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.5.4

      - name: Check if version is already on Docker Hub
        id: check
        run: echo "published_to_docker=$(docker manifest inspect "${{ matrix.docker_repository }}:${{ matrix.buildpack_version }}" &> /dev/null && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: steps.check.outputs.published_to_docker == 'false'
        uses: docker/login-action@v3.1.0
        with:
          registry: docker.io
          username: ${{ secrets.docker_hub_user }}
          password: ${{ secrets.docker_hub_token }}


      - name: Publish to Docker Hub
        if: steps.check.outputs.published_to_docker == 'false'
        env:
          TARGETS: ${{ toJSON(matrix.targets) }}
        run: |
          temp_tag="${{ matrix.docker_repository }}:_${{ github.run_id }}"
          perm_tag="${{ matrix.docker_repository }}:${{ matrix.buildpack_version }}"
          target_count=$(jq --exit-status -r length <<< "${TARGETS}")
          if (( target_count == 1 )); then
            output_dir=$(jq --exit-status -r '.[0].output_dir' <<< "${TARGETS}")
            # Build+push single-arch image to a temp tag
            pack buildpack package "${temp_tag}" --config "${output_dir}/package.toml" -v --publish
            # Promote the temp tag if this isn't a dry run
            if [ "${{ inputs.dry_run }}" != "true" ]; then
              docker tag "${temp_tag}" "${perm_tag}"
              docker push "${perm_tag}"
            fi
          else
            # Build a list of manifest image tags, one for each os/arch.
            manifests=($(jq --exit-status -r "map(.oci_platform) | map(\"${temp_tag}_\(sub(\"/\";\"-\"))\") | join(\" \")" <<< "${TARGETS}"))
            echo "manifests: ${manifests[@]}"

            for i in "${!manifests[@]}"; do
              output_dir=$(jq --exit-status -r ".[$i].output_dir" <<< "${TARGETS}")
              echo "Packaging ${output_dir} into manifest: ${manifests[i]}"
              pack buildpack package "${manifests[i]}" --config "${output_dir}/package.toml" -v --publish
            done

            # create a manifest list using platform-specific images created above.
            docker manifest create "${temp_tag}" "${manifests[@]}"

            # annotate each of the manifests with the correct os/arch
            for i in "${!manifests[@]}"; do
              platform=$(jq --exit-status -r ".[$i].oci_platform" <<< "${TARGETS}")
              os=$(cut -d "/" -f1 <<< "${platform}")
              arch=$(cut -d "/" -f2 <<< "${platform}")
              echo "Annotating ${temp_tag} / ${manifests[i]} with ${os}/${arch}"
              docker manifest annotate "${temp_tag}" "${manifests[i]}" --os "${os}" --arch "${arch}"
            done

            # Push the manifest list / image index to a disposable tag
            docker manifest push "${temp_tag}"

            # If this isn't a dry run, promote temp tags to a stable tag
            if [ "${{ inputs.dry_run }}" != "true" ]; then
              for platform in $(jq --exit-status -r "map(.oci_platform) | .[]" <<< "${TARGETS}"); do
                docker tag "${temp_tag}_${platform//\//-}" "${perm_tag}_${platform//\//-}"
                docker push "${perm_tag}_${platform//\//-}"
              done
              docker buildx imagetools create -t "${perm_tag}" "${temp_tag}"
            fi
          fi

      - name: Unpublish temp tags from this run
        if: always()
        env:
          TARGETS: ${{ toJSON(matrix.targets) }}
        run: |
          dockerhub_token=$(curl -sS -f --retry 3 --retry-connrefused --connect-timeout 5 --max-time 30 -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.docker_hub_user }}\", \"password\": \"${{ secrets.docker_hub_token }}\"}" https://hub.docker.com/v2/users/login/ | jq --exit-status -r .token)
          namespace=$(cut -d "/" -f2 <<< "${{ matrix.docker_repository }}")
          repo=$(cut -d "/" -f3 <<< "${{ matrix.docker_repository }}")
          temp_tag_base="_${{ github.run_id }}"
          temp_tags=("${temp_tag_base}")
          for platform in $(jq --exit-status -r 'map(.oci_platform) | .[]' <<< ${TARGETS}); do
            temp_tags+=("${temp_tag_base}_${platform//\//-}")
          done
          status=0
          for temp_tag in "${temp_tags[@]}"; do
            echo "Deleting ${namespace}/${repo}:${temp_tag}"
            response=$(curl -sS --retry 3 --retry-connrefused --connect-timeout 5 --max-time 30 -X DELETE \
              -H "Authorization: JWT ${dockerhub_token}" \
              "https://hub.docker.com/v2/namespaces/${namespace}/repositories/${repo}/tags/${temp_tag}"
            )

            if [[ -z $response ]]; then
              echo "Deleted."
            elif [[ $response =~ "tag not found" ]]; then
              echo "Tag does not exist."
            else
              echo "Couldn't delete. Response: ${response}"
              status=22
            fi
          done
          exit $status

  publish-github:
    name: Publish â†’ GitHub Release
    needs: [compile]
    runs-on: ${{ inputs.ip_allowlisted_runner }}
    steps:
      - name: Restore buildpacks
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          key: ${{ github.run_id }}-compiled-buildpacks
          path: ${{ env.PACKAGE_DIR }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.5.4

      - name: Generate CNB files
        run: |
          for buildpack in $(jq --exit-status -c '.[]' <<< '${{ needs.compile.outputs.buildpacks }}'); do
            targets=$(jq --exit-status -c '.targets' <<< "${buildpack}")
            target_count=$(jq --exit-status -r 'length' <<< "${targets}")
            artifact_prefix=$(jq --exit-status -r '.buildpack_artifact_prefix' <<< "${buildpack}")

            for ((i=0;i<target_count;i++)); do
              output_dir=$(jq --exit-status -r ".[$i].output_dir" <<< "${targets}")
              if (( target_count == 1)); then
                cnb_file="${artifact_prefix}.cnb"
              else
                platform=$(jq --exit-status -r ".[$i].oci_platform" <<< "${targets}")
                cnb_file="${artifact_prefix}_${platform//\//-}.cnb"
              fi
              pack buildpack package "$cnb_file" --config "${output_dir}/package.toml" --format file --verbose
            done
          done

      - name: Get token for GitHub application (Linguist)
        uses: heroku/use-app-token-action@main
        id: generate-token
        with:
          app_id: ${{ inputs.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Check if release exists
        id: check
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}
        run: echo "published_to_github=$(gh release view v${{ needs.compile.outputs.version }} -R ${{ github.repository }} &> /dev/null && echo "true" || echo "false")" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: inputs.dry_run == false && steps.check.outputs.published_to_github == 'false'
        uses: softprops/action-gh-release@v2.0.4
        with:
          token: ${{ steps.generate-token.outputs.app_token }}
          tag_name: v${{ needs.compile.outputs.version }}
          body: ${{ needs.compile.outputs.changelog }}
          files: "*.cnb"
          fail_on_unmatched_files: true

  publish-cnb:
    name: Publish â†’ CNB Registry - ${{ matrix.buildpack_id }}
    needs: [compile, publish-docker]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compile.outputs.buildpacks) }}
    steps:
      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.5.4

      - name: Check if version is already in the registry
        id: check
        run: |
          registry_url="https://registry.buildpacks.io/api/v1/buildpacks/${{ matrix.buildpack_id }}/${{ matrix.buildpack_version }}"
          if curl --head --silent --show-error --fail --retry 1 --retry-all-errors --connect-timeout 10 --max-time 60 "${registry_url}"; then
            echo "published_to_cnb_registry=true" >> $GITHUB_OUTPUT
          else
            echo "published_to_cnb_registry=false" >> $GITHUB_OUTPUT
          fi

      - name: Calculate the buildpack image digest
        id: digest
        run: echo "value=$(crane digest ${{ matrix.docker_repository }}:${{ matrix.buildpack_version }})" >> "$GITHUB_OUTPUT"

      - name: Register the new version with the CNB Buildpack Registry
        if: inputs.dry_run == false && steps.check.outputs.published_to_cnb_registry == 'false'
        uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:5.5.3
        with:
          token: ${{ secrets.cnb_registry_token }}
          id: ${{ matrix.buildpack_id }}
          version: ${{ matrix.buildpack_version }}
          address: ${{ matrix.docker_repository }}@${{ steps.digest.outputs.value }}

  update-builder:
    name: Update Builder
    needs: [compile, publish-docker, publish-cnb, publish-github]
    runs-on: ${{ inputs.ip_allowlisted_runner }}
    steps:
      - name: Get token for GH application (Linguist)
        uses: heroku/use-app-token-action@main
        id: generate-token
        with:
          app_id: ${{ inputs.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: ./buildpacks

      - name: Checkout cnb-builder-images repository
        uses: actions/checkout@v4
        with:
          repository: heroku/cnb-builder-images
          path: ./cnb-builder-images
          # Using the GH application token here will configure the local git config for this repo with credentials
          # that can be used to make signed commits that are attributed to the GH application user
          token: ${{ steps.generate-token.outputs.app_token }}

      - name: Install crane
        uses: buildpacks/github-actions/setup-tools@v5.5.4

      - name: Install Languages CLI
        uses: heroku/languages-github-actions/.github/actions/install-languages-cli@main
        with:
          branch: ${{ inputs.languages_cli_branch }}

      - name: Update Builder
        # The dry run check is performed here because the update process requires a published
        # image to exist in order to calculate a digest with `crane`. Adding the check here
        # means no files will be modified and so no PR will be created later.
        if: inputs.dry_run == false
        run: actions update-builder --repository-path ./buildpacks --builder-repository-path ./cnb-builder-images --builders builder-20,builder-22,builder-classic-22,buildpacks-20,salesforce-functions

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v6.0.2
        with:
          token: ${{ steps.generate-token.outputs.app_token }}
          title: Update ${{ github.repository }} to v${{ needs.compile.outputs.version }}
          body: ${{ needs.compile.outputs.changelog }}
          commit-message: |
            Update ${{ github.repository }} to v${{ needs.compile.outputs.version }}

            ${{ needs.compile.outputs.changelog }}
          path: ./cnb-builder-images
          branch: update/${{ github.repository }}
          delete-branch: true
          # This will ensure commits made from this workflow are attributed to the GH application user
          committer: ${{ inputs.app_username }} <${{ inputs.app_email }}>
          author: ${{ inputs.app_username }} <${{ inputs.app_email }}>

      - name: Configure PR
        if: steps.pr.outputs.pull-request-operation == 'created'
        run: gh pr merge --auto --squash --repo heroku/cnb-builder-images "${{ steps.pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}
